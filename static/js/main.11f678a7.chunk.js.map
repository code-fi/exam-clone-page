{"version":3,"sources":["components/topBar/index.js","components/questionList/index.js","components/note/index.js","components/feedback/index.js","components/modal/index.js","components/answerSheet/index.js","components/bottomBar/index.js","store/model.js","actions/questionActions.js","actions/index.js","components/modal/alert.js","components/settings/index.js","components/labValues/index.js","App/index.js","reportWebVitals.js","reducers/questionsReducer.js","reducers/index.js","index.js","store/configuration.js"],"names":["TopBar","totalQuestions","currentQuestionNumber","canGoPrevious","canGoNext","getPreviousQuestion","getNextQuestion","onNotePress","onLabValuesPress","useState","showFullScreen","setShowFullScreen","bodyRef","useRef","document","body","useEffect","current","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","openFullscreen","fullScreen","mozFullScreen","webkitIsFullScreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","className","style","flexGrow","disabled","onClick","alt","src","React","memo","QuestionsList","questions","onQuestionPress","currentIndex","mapQuestions","map","question","index","id","NoteComponent","isVisible","close","draggable","note","setNote","onTextChange","useCallback","value","target","axis","handle","width","onChange","rows","FeedbackComponent","placeholder","display","alignItems","type","name","htmlFor","fontSize","marginLeft","Modal","onClose","children","AnswerSheet","renderAnswers","answers","key","answer","marginTop","thenTime","moment","add","BottomBar","onFeedbackPress","onAlert","onSettingPress","countDown","setCountDown","counterInterval","setInterval","c","diff","d","h","format","m","s","clearInterval","marginRight","textTransform","marginBottom","backgroundColor","padding","createActions","setQuestions","setCurrentQuestionIndex","resetQuestions","Types","Creators","questionActions","AlertComponent","onNoPress","okayPress","title","content","okText","noText","SettingsComponent","LabValues","textAlign","position","fontWeight","top","right","color","border","height","borderRadius","justifyContent","margin","connect","state","dispatch","bindActionCreators","actions","currentQuestionIndex","numberOfQuestions","enableDragging","clientWidth","currentQuestion","setCurrentQuestion","feedbackVisible","notesVisible","labValuesVisible","settingsVisible","modalVisible","UIState","setUIState","Q","onGoNext","onGoPrevious","questionPress","toggleModal","toggleFeedback","toggleNote","toggleSetting","toggleLab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","actionHandlers","SET_QUESTIONS","_","length","GET_NEXT_QUESTION","GET_PREVIOUS_QUESTION","SET_CURRENT_QUESTION_INDEX","RESET_QUESTIONS","createReducer","combineReducers","questionsReducer","store","initialState","createStore","reducers","storeConfiguration","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.11f678a7.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst TopBar = ({\r\n  totalQuestions,\r\n  currentQuestionNumber,\r\n  canGoPrevious,\r\n  canGoNext,\r\n  getPreviousQuestion,\r\n  getNextQuestion,\r\n  onNotePress,\r\n  onLabValuesPress,\r\n}) => {\r\n  const [showFullScreen, setShowFullScreen] = useState(false);\r\n  const bodyRef = useRef(document.body);\r\n  const openFullscreen = () => {\r\n    const body = bodyRef.current;\r\n\r\n    if (body.requestFullscreen) {\r\n      body.requestFullscreen();\r\n    } else if (body.webkitRequestFullscreen) {\r\n      /* Safari */\r\n      body.webkitRequestFullscreen();\r\n    } else if (body.msRequestFullscreen) {\r\n      /* IE11 */\r\n      body.msRequestFullscreen();\r\n    }\r\n  };\r\n\r\n  const closeFullscreen = () => {\r\n    if (document.exitFullscreen) {\r\n      document.exitFullscreen();\r\n    } else if (document.webkitExitFullscreen) {\r\n      /* Safari */\r\n      document.webkitExitFullscreen();\r\n    } else if (document.msExitFullscreen) {\r\n      /* IE11 */\r\n      document.msExitFullscreen();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (showFullScreen) {\r\n      openFullscreen();\r\n    } else if (\r\n      document.fullScreen ||\r\n      document.mozFullScreen ||\r\n      document.webkitIsFullScreen\r\n    ) {\r\n      closeFullscreen();\r\n    }\r\n  }, [showFullScreen]);\r\n\r\n  return (\r\n    <div className=\"top-bar\">\r\n      <div className=\"item\">\r\n        <p className=\"bold\">\r\n          Item: {currentQuestionNumber} of {totalQuestions}\r\n        </p>\r\n        <span>QID: 47593</span>\r\n      </div>\r\n      <div style={{ flexGrow: 1 }} className=\"buttons\">\r\n        <button disabled={!canGoPrevious} onClick={getPreviousQuestion}>\r\n          <img alt=\"\" src=\"/assets/icons/left-arrow.png\" />\r\n          <span>Previous</span>\r\n        </button>\r\n\r\n        <button disabled={!canGoNext} onClick={getNextQuestion}>\r\n          <img alt=\"\" src=\"/assets/icons/right-arrow.png\" />\r\n          <span>Next</span>\r\n        </button>\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <button\r\n          className=\"_hidden\"\r\n          onClick={() => setShowFullScreen(!showFullScreen)}\r\n        >\r\n          <img\r\n            alt=\"\"\r\n            src={\r\n              showFullScreen\r\n                ? \"/assets/icons/fullscreen-exit.png\"\r\n                : \"/assets/icons/fullscreen.png\"\r\n            }\r\n          />\r\n          <span>{showFullScreen ? \"Exit Fullscreen\" : \"Fullscreen\"}</span>\r\n        </button>\r\n        <button className=\"_hidden\">\r\n          <img alt=\"\" src=\"/assets/icons/tutorial.png\" />\r\n          <span>Tutorial</span>\r\n        </button>\r\n        <button onClick={onLabValuesPress}>\r\n          <img alt=\"\" src=\"/assets/icons/labs.png\" />\r\n          <span>Lab Values</span>\r\n        </button>\r\n        <button onClick={onNotePress}>\r\n          <img alt=\"\" src=\"/assets/icons/edit.png\" />\r\n          <span>Note</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(TopBar);\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst QuestionsList = ({ questions, onQuestionPress, currentIndex }) => {\r\n  const mapQuestions = questions.map((question, index) => (\r\n    <li\r\n      className={currentIndex === index ? \"active\" : null}\r\n      onClick={() => onQuestionPress(index)}\r\n      key={question.id}\r\n    >\r\n      Q{question.id}\r\n    </li>\r\n  ));\r\n  return (\r\n    <div className=\"scroll-container\">\r\n      <ol>{mapQuestions}</ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(QuestionsList);\r\n","import React, { useCallback, useState } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\n\r\nfunction NoteComponent({ isVisible, close, draggable }) {\r\n  const [note, setNote] = useState(\"\");\r\n\r\n  const onTextChange = useCallback(({ target: { value } }) => {\r\n    setNote(value);\r\n  }, []);\r\n\r\n  return (\r\n    isVisible && (\r\n      <Draggable disabled={!draggable} axis=\"both\" handle=\".handle\">\r\n        <div style={{ width: 380 }} className=\"note handle slideIn\">\r\n          <div className=\"header\">\r\n            <h3>Manage Notes</h3>\r\n            <button onClick={close} className=\"closeBtn\">\r\n              &times;\r\n            </button>\r\n          </div>\r\n          <div className=\"text-area\">\r\n            <textarea value={note} onChange={onTextChange} rows=\"15\"></textarea>\r\n          </div>\r\n          <div className=\"footer\">\r\n            <button onClick={close}>Save &amp; Close</button>\r\n            <button onClick={() => setNote(\"\")}>Clear Notes</button>\r\n          </div>\r\n        </div>\r\n      </Draggable>\r\n    )\r\n  );\r\n}\r\n\r\nexport default NoteComponent;\r\n","import React from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nfunction FeedbackComponent({ close, draggable }) {\r\n  return (\r\n    <Draggable disabled={!draggable} axis=\"both\" handle=\".handle\">\r\n      <div className=\"note handle slideIn\">\r\n        <div className=\"header\">\r\n          <h3>Feedback</h3>\r\n          <button onClick={close} className=\"closeBtn\">\r\n            &times;\r\n          </button>\r\n        </div>\r\n        <div className=\"text-area\">\r\n          <textarea\r\n            placeholder={\r\n              'We appreciate your feedback. However, please provide as much detail as possible in the permitted space avoiding simplistic feedback like \"Good question\", \"hard question\" etc.'\r\n            }\r\n            rows=\"18\"\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"footer\">\r\n          <div style={{ display: \"flex\", alignItems: \"flex-start\" }}>\r\n            <input type=\"checkbox\" name=\"tech_issue\" id=\"tech_issue\" />\r\n            <label\r\n              htmlFor=\"tech_issue\"\r\n              style={{ fontSize: \"small\", marginLeft: 8 }}\r\n            >\r\n              Check here if concern is for software/technical issue\r\n            </label>\r\n          </div>\r\n          <button>Submit</button>\r\n        </div>\r\n      </div>\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default FeedbackComponent;\r\n","import React from \"react\";\r\n\r\nfunction Modal({ onClose, children }) {\r\n  return (\r\n    <div onClick={onClose} className=\"modal\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst AnswerSheet = ({ question }) => {\r\n  const renderAnswers = question.answers.map(({ key, answer }) => (\r\n    <li key={key}>\r\n      <span>{key}.</span>\r\n      <input id={`answer-${key}`} value={key} name=\"answer\" type=\"radio\" />\r\n      <label htmlFor={`answer-${key}`}>{answer}</label>\r\n    </li>\r\n  ));\r\n  return (\r\n    <div className=\"answer-sheet\">\r\n      <div className=\"container\">\r\n        <h2>Question</h2>\r\n        <p>{question.question}</p>\r\n      </div>\r\n      <div style={{ marginTop: 32 }} className=\"container\">\r\n        <h2>Answers</h2>\r\n        <ul>{renderAnswers}</ul>\r\n      </div>\r\n      <br />\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnswerSheet;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nconst thenTime = moment().add(1, \"hours\");\r\n\r\nconst BottomBar = ({ onFeedbackPress, onAlert, onSettingPress }) => {\r\n  const [countDown, setCountDown] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const counterInterval = setInterval(() => {\r\n      let c = thenTime.diff(moment()),\r\n        d = moment(c);\r\n\r\n      setCountDown({\r\n        h: d.format(\"HH\"),\r\n        m: d.format(\"mm\"),\r\n        s: d.format(\"ss\"),\r\n      });\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(counterInterval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"top-bar\">\r\n      <div className=\"item mobile-hidden\">\r\n        <p className=\"bold\">Current Test Info</p>\r\n        <span>Frank Test | React Demo Exam</span>\r\n      </div>\r\n      <div style={{ flexGrow: 1, marginLeft: 12, marginRight: 12 }}>\r\n        <p>Duration: 1:00:00</p>\r\n        <h5\r\n          style={{ textTransform: \"uppercase\", marginBottom: 4, marginTop: 2 }}\r\n          className=\"bold\"\r\n        >\r\n          Time remaining\r\n        </h5>\r\n        {countDown && (\r\n          <span\r\n            style={{\r\n              backgroundColor: \"red\",\r\n              padding: 2,\r\n              display: \"inline-block\",\r\n            }}\r\n            className=\"bold\"\r\n          >\r\n            {`${countDown.h}:${countDown.m}:${countDown.s}`}\r\n          </span>\r\n        )}\r\n      </div>\r\n      <button onClick={onSettingPress}>\r\n        <img alt=\"\" src=\"/assets/icons/settings.png\" />\r\n        <span>Settings</span>\r\n      </button>\r\n      <button onClick={onFeedbackPress}>\r\n        <img alt=\"\" src=\"/assets/icons/feedback.png\" />\r\n        <span>Feedback</span>\r\n      </button>\r\n      <button onClick={onAlert}>\r\n        <img alt=\"\" src=\"/assets/icons/pause.png\" />\r\n        <span>Suspend</span>\r\n      </button>\r\n      <button onClick={onAlert}>\r\n        <img alt=\"\" src=\"/assets/icons/exit.png\" />\r\n        <span>Exit</span>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(BottomBar);\r\n","export const questions = [\r\n  {\r\n    id: 1,\r\n    question:\r\n      \"Before you can begin to determine what the composition of a particular paragraph will be, you must first decide on an argument and a working thesis statement for your paper. What is the most important idea that you are trying to convey to your reader?\",\r\n    answers: [\r\n      { key: \"A\", answer: \"New York\" },\r\n      { key: \"B\", answer: \"New Zealand\" },\r\n      { key: \"C\", answer: \"New Mexico\" },\r\n      { key: \"D\", answer: \"New Jersey\" },\r\n    ],\r\n  },\r\n\r\n  {\r\n    id: 2,\r\n    question:\r\n      \"The information in each paragraph must be related to that idea. In other words, your paragraphs should remind your reader that there is a recurrent relationship between your thesis and the information in each paragraph. A working thesis functions like a seed from which your paper,?\",\r\n    answers: [\r\n      { key: \"A\", answer: \"New York City\" },\r\n      { key: \"B\", answer: \"Zealand\" },\r\n      { key: \"C\", answer: \"Mexico\" },\r\n      { key: \"D\", answer: \"Jersey City\" },\r\n    ],\r\n  },\r\n\r\n  {\r\n    id: 3,\r\n    question:\r\n      \"You must first decide on an argument and a working thesis statement for your paper. What is the most important idea that you are trying to convey to your reader? The information in each paragraph must be related to that idea. In other words, your paragraphs should remind your reader that there is a recurrent relationship between your thesis and the information in each paragraph. A working thesis functions like a seed from which your paper, and your ideas, will grow. The whole process is an organic one—a natural progression from a seed to a full-blown paper where there are direct, familial relationships between all of the ideas in the paper.\",\r\n    answers: [\r\n      { key: \"A\", answer: \"True\" },\r\n      { key: \"B\", answer: \"False\" },\r\n    ],\r\n  },\r\n\r\n  {\r\n    id: 4,\r\n    question:\r\n      \"Before you can begin to determine what the composition of a particular paragraph will be, you must first decide on an argument and a working thesis statement for your paper. What is the most important idea that you are trying to convey to your reader?\",\r\n    answers: [\r\n      { key: \"A\", answer: \"New York\" },\r\n      { key: \"B\", answer: \"New Zealand\" },\r\n      { key: \"C\", answer: \"New Mexico\" },\r\n      { key: \"D\", answer: \"New Jersey\" },\r\n    ],\r\n  },\r\n\r\n  {\r\n    id: 5,\r\n    question:\r\n      \"Before you can begin to determine what the composition of a particular paragraph will be, you must first decide on an argument and a working thesis statement for your paper. What is the most important idea that you are trying to convey to your reader?\",\r\n    answers: [\r\n      { key: \"A\", answer: \"Africa\" },\r\n      { key: \"B\", answer: \"Asia\" },\r\n    ],\r\n  },\r\n];\r\n","import { createActions } from \"reduxsauce\";\r\n\r\nconst { Types, Creators } = createActions({\r\n  setQuestions: ['questions'],\r\n  getNextQuestion:null,\r\n  setCurrentQuestionIndex:['index'],\r\n  getPreviousQuestion: null,\r\n  resetQuestions:null\r\n});\r\n\r\nexport { Types };\r\nexport default Creators;\r\n","import questionActions from \"./questionActions\";\r\n\r\nexport default {\r\n  ...questionActions,\r\n};\r\n","import React from \"react\";\r\n\r\nfunction AlertComponent({\r\n  onNoPress,\r\n  okayPress,\r\n  title,\r\n  content,\r\n  okText = \"Yes\",\r\n  noText = \"No\",\r\n}) {\r\n  return (\r\n    <div className=\"content\">\r\n      {title != null && <h3>{title}</h3>}\r\n      {content != null && <p>{content}</p>}\r\n      <div className=\"footer\">\r\n        {okayPress != null && <button onClick={okayPress}>{okText}</button>}\r\n        {onNoPress != null && <button onClick={onNoPress}>{noText}</button>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AlertComponent;\r\n","import React from \"react\";\r\n\r\nfunction SettingsComponent({ close }) {\r\n  return (\r\n    <div className=\"_setting-container\">\r\n      <button onClick={close} className=\"_closeBtn\">\r\n        &times;\r\n      </button>\r\n      <h3>Settings</h3>\r\n      <div className=\"_setting-section\">\r\n        <h4>Appearance</h4>\r\n        <div className=\"_setting-options\">\r\n          <ul>\r\n            <li className=\"_setting-item\">\r\n              <p>Font Size</p>\r\n              <div style={{ display: \"flex\" }}>\r\n                <button>-</button>\r\n                <button>+</button>\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div className=\"_setting-section\">\r\n        <h4>Features</h4>\r\n        <div className=\"_setting-options\">\r\n          <ul>\r\n            <li className=\"_setting-item\">\r\n              <p>Confirm Answer Omission</p>\r\n              <input type=\"checkbox\" />\r\n            </li>\r\n            <li className=\"_setting-item\">\r\n              <p>Show Timer</p>\r\n              <input type=\"checkbox\" />\r\n            </li>\r\n            <li className=\"_setting-item\">\r\n              <p>Split Screen Explanations</p>\r\n              <input type=\"checkbox\" />\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingsComponent;\r\n","import React from \"react\";\r\nfunction LabValues({ close }) {\r\n  return (\r\n    <div className=\"_lab-container slideIn\">\r\n      <div style={{ padding: 20, textAlign: \"center\", position: \"relative\" }}>\r\n        <h3 style={{ fontWeight: \"bold\" }}>Lab Values</h3>\r\n        <button\r\n          onClick={close}\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 10,\r\n            right: 10,\r\n            color: \"#ffffff\",\r\n            backgroundColor: \"#164d80\",\r\n            border: \"none\",\r\n            height: 25,\r\n            width: 25,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            borderRadius: 25,\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          &times;\r\n        </button>\r\n      </div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Blood, Serem, Plasma</th>\r\n            <th>Reference Range</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>Alanine aminotransferase (ALT), serum</td>\r\n            <td>8-40 U/L</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Alkaline phosphatase, serum</td>\r\n            <td>8-40 U/L</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Alanine aminotransferase (ALT), serum</td>\r\n            <td>8-40 U/L</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Alanine aminotransferase (ALT), serum</td>\r\n            <td>8-40 U/L</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Alanine aminotransferase (ALT), serum</td>\r\n            <td>8-40 U/L</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Alanine aminotransferase (ALT), serum</td>\r\n            <td>8-40 U/L</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Alanine aminotransferase (ALT), serum</td>\r\n            <td>8-40 U/L</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Alanine aminotransferase (ALT), serum</td>\r\n            <td>8-40 U/L</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <p style={{ margin: 16 }}>\r\n        For the last 2, the TagsList should be better alongside with a series of\r\n        improvements for Desktop as well (better UI for multiple tags, hide tags\r\n        when selected, better multi-selection, etc). As for the Dashboard and\r\n        Alert page headers, the Query one recently had an update to wrap both\r\n        tags and control buttons, if you think it's worth it I can update them.\r\n        The dashboard one currently hides a lot of things on the mobile version\r\n        as the way to solve it.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LabValues;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport TopBar from \"../components/topBar\";\r\nimport QuestionList from \"../components/questionList\";\r\nimport NoteComponent from \"../components/note\";\r\nimport FeedbackComponent from \"../components/feedback\";\r\nimport Modal from \"../components/modal\";\r\nimport \"./style.css\";\r\nimport AnswerSheet from \"../components/answerSheet\";\r\nimport BottomBar from \"../components/bottomBar\";\r\nimport { questions as Q } from \"../store/model\";\r\nimport actions from \"../actions\";\r\nimport AlertComponent from \"../components/modal/alert\";\r\nimport SettingsComponent from \"../components/settings\";\r\nimport LabValues from \"../components/labValues\";\r\n\r\nfunction App({\r\n  setQuestions,\r\n  questions,\r\n  currentQuestionIndex,\r\n  setCurrentQuestionIndex,\r\n  numberOfQuestions,\r\n  canGoPrevious,\r\n  canGoNext,\r\n  getPreviousQuestion,\r\n  getNextQuestion,\r\n}) {\r\n  const enableDragging = document.body.clientWidth > 768;\r\n\r\n  const [currentQuestion, setCurrentQuestion] = useState(null);\r\n  const [UIState, setUIState] = useState({\r\n    feedbackVisible: false,\r\n    notesVisible: false,\r\n    labValuesVisible: false,\r\n    settingsVisible: false,\r\n    modalVisible: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setQuestions(Q);\r\n  }, [setQuestions]);\r\n\r\n  useEffect(() => {\r\n    if (currentQuestionIndex > -1) {\r\n      setCurrentQuestion(questions[currentQuestionIndex]);\r\n    }\r\n  }, [currentQuestionIndex, questions]);\r\n\r\n  const onGoNext = useCallback(() => getNextQuestion(), [getNextQuestion]);\r\n  const onGoPrevious = useCallback(() => getPreviousQuestion(), [\r\n    getPreviousQuestion,\r\n  ]);\r\n\r\n  const questionPress = useCallback((index) => setCurrentQuestionIndex(index), [\r\n    setCurrentQuestionIndex,\r\n  ]);\r\n\r\n  const toggleModal = () =>\r\n    setUIState({ ...UIState, modalVisible: !UIState.modalVisible });\r\n  const toggleFeedback = () =>\r\n    setUIState({\r\n      ...UIState,\r\n      feedbackVisible: !UIState.feedbackVisible,\r\n    });\r\n\r\n  const toggleNote = () =>\r\n    setUIState({ ...UIState, notesVisible: !UIState.notesVisible });\r\n\r\n  const toggleSetting = () =>\r\n    setUIState({ ...UIState, settingsVisible: !UIState.settingsVisible });\r\n\r\n  const toggleLab = () =>\r\n    setUIState({ ...UIState, labValuesVisible: !UIState.labValuesVisible });\r\n  return (\r\n    <section id=\"app\">\r\n      <TopBar\r\n        currentQuestionNumber={currentQuestionIndex + 1}\r\n        totalQuestions={numberOfQuestions}\r\n        canGoPrevious={canGoPrevious}\r\n        canGoNext={canGoNext}\r\n        getPreviousQuestion={onGoPrevious}\r\n        getNextQuestion={onGoNext}\r\n        onNotePress={toggleNote}\r\n        onLabValuesPress={toggleLab}\r\n      />\r\n      <section id=\"content\">\r\n        <QuestionList\r\n          onQuestionPress={questionPress}\r\n          currentIndex={currentQuestionIndex}\r\n          questions={questions}\r\n        />\r\n        {UIState.labValuesVisible && <LabValues close={toggleLab} />}\r\n        {currentQuestion != null && <AnswerSheet question={currentQuestion} />}\r\n        <NoteComponent\r\n          draggable={enableDragging}\r\n          close={toggleNote}\r\n          isVisible={UIState.notesVisible}\r\n        />\r\n        {UIState.settingsVisible && <SettingsComponent close={toggleSetting} />}\r\n\r\n        {UIState.feedbackVisible && (\r\n          <FeedbackComponent\r\n            draggable={enableDragging}\r\n            close={toggleFeedback}\r\n          />\r\n        )}\r\n      </section>\r\n      <BottomBar\r\n        onFeedbackPress={toggleFeedback}\r\n        onAlert={toggleModal}\r\n        onSettingPress={toggleSetting}\r\n      />\r\n      {UIState.modalVisible && (\r\n        <Modal>\r\n          <AlertComponent\r\n            onNoPress={toggleModal}\r\n            okayPress={toggleModal}\r\n            title=\"Confirm Action\"\r\n            content=\"Before you can begin to determine what the composition of a particular paragraph will be, you must first decide on an argument and a working thesis statement for your paper.\"\r\n          />\r\n        </Modal>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\nconst mapStatToProps = (state) => ({\r\n  ...state.questions,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  ...bindActionCreators(\r\n    {\r\n      setQuestions: actions.setQuestions,\r\n      setCurrentQuestionIndex: actions.setCurrentQuestionIndex,\r\n      getNextQuestion: actions.getNextQuestion,\r\n      getPreviousQuestion: actions.getPreviousQuestion,\r\n    },\r\n    dispatch\r\n  ),\r\n});\r\n\r\nexport default connect(mapStatToProps, mapDispatchToProps)(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { Types } from \"../actions/questionActions\";\r\nimport { createReducer } from \"reduxsauce\";\r\n\r\nconst INITIAL_STATE = {\r\n  questions: [],\r\n  currentQuestionIndex: -1,\r\n  numberOfQuestions: 0,\r\n  canGoPrevious: false,\r\n  canGoNext: false,\r\n};\r\n\r\nconst setQuestions = (_, { questions }) => ({\r\n  questions,\r\n  numberOfQuestions: questions.length,\r\n  currentQuestionIndex: 0,\r\n  canGoPrevious: false,\r\n  canGoNext: questions.length > 0,\r\n});\r\n\r\nconst setCurrentQuestionIndex = (state, { index }) => ({\r\n  ...state,\r\n  currentQuestionIndex: index,\r\n  canGoNext: index < state.numberOfQuestions - 1,\r\n  canGoPrevious: index > 0,\r\n});\r\n\r\nconst goNext = (state) => {\r\n  const currentQuestionIndex = state.currentQuestionIndex + 1,\r\n    canGoPrevious = true,\r\n    canGoNext = currentQuestionIndex < state.numberOfQuestions - 1;\r\n\r\n  return { ...state, currentQuestionIndex, canGoNext, canGoPrevious };\r\n};\r\n\r\nconst goPrevious = (state) => {\r\n  const currentQuestionIndex = state.currentQuestionIndex - 1,\r\n    canGoPrevious = currentQuestionIndex > 0,\r\n    canGoNext = true;\r\n\r\n  return { ...state, currentQuestionIndex, canGoNext, canGoPrevious };\r\n};\r\n\r\nconst resetQuestions = () => INITIAL_STATE;\r\n\r\nconst actionHandlers = {\r\n  [Types.SET_QUESTIONS]: setQuestions,\r\n  [Types.GET_NEXT_QUESTION]: goNext,\r\n  [Types.GET_PREVIOUS_QUESTION]: goPrevious,\r\n  [Types.SET_CURRENT_QUESTION_INDEX]: setCurrentQuestionIndex,\r\n  [Types.RESET_QUESTIONS]: resetQuestions,\r\n};\r\n\r\nexport default createReducer(INITIAL_STATE, actionHandlers);\r\n","import questionsReducer from \"./questionsReducer\";\r\nimport {combineReducers} from 'redux';\r\n\r\nexport default combineReducers({\r\n    questions: questionsReducer,\r\n});\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App/index\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport storeConfiguration from \"./store/configuration\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst { store } = storeConfiguration();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import { createStore } from \"redux\";\r\n// import createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducers from \"../reducers\";\r\n// import saga from '../saga';\r\n\r\nconst configuration = (initialState) => {\r\n  // const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const store = createStore(\r\n    reducers,\r\n    initialState\r\n    // applyMiddleware(sagaMiddleware)\r\n  );\r\n\r\n  // sagaMiddleware.run(saga);\r\n  return { store };\r\n};\r\n\r\nexport default configuration;\r\n"],"sourceRoot":""}